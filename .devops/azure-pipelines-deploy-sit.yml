trigger: none
pr: none

variables:
  environment: 'SIT'
  vmImageNameDefault: 'ubuntu-latest'
  poolNameDeploy: 'uat_agent_pool'
  dockerRegistryServiceConnection: 'pm-cstaruatregistry-connector'
  imageRepository: 'mockpaymentgateway'
  dockerfileRelativePath: './Dockerfile'
  namespace: 'mockpaymentgateway-sit'
  kubernetesServiceConnection: 'ddsakstest-self-connection-pmmockservice'
  imagePullSecret: 'pmmockserviceregistry-auth'
  containerRegistry: 'cstaruatregistry.azurecr.io'

stages:
  - stage: POM
    displayName: POM
    jobs:
      - job: POM
        displayName: POM
        pool:
          vmImage: $(vmImageNameDefault)
        steps:
          - task: DownloadSecureFile@1
            displayName: 'download settings.xml for Maven'
            name: settingsxml
            inputs:
              secureFile: 'settings_v2.xml'
              retryCount: '2'
          - task: Bash@3
            displayName: Get POM version
            name: getpomversion
            inputs:
              workingDirectory: ./
              targetType: 'inline'
              script: |
                version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout -s $(settingsxml.secureFilePath))
                echo "##vso[task.setvariable variable=outputpomversion;isOutput=true]$version"
                echo "Current Project Version ${version}"
              failOnStderr: true

  - stage: SIT
    displayName: SIT
    dependsOn: POM
    variables:
      pomversion: $[ stageDependencies.POM.POM.outputs['getpomversion.outputpomversion'] ]
    jobs:
      - job: Build
        displayName: Build
        pool:
          vmImage: $(vmImageNameDefault)
        steps:
          - task: DownloadSecureFile@1
            displayName: 'download settings.xml for Maven'
            name: settingsxml
            inputs:
              secureFile: 'settings_v2.xml'
              retryCount: '2'
          - task: Docker@2
            displayName: Build and push an image to container registry
            condition: succeeded()
            inputs:
              containerRegistry: $(dockerRegistryServiceConnection)
              repository: $(imageRepository)
              command: 'buildAndPush'
              Dockerfile: '$(Build.Repository.LocalPath)/$(dockerfileRelativePath)'
              buildContext: $(Build.Repository.LocalPath)
              tags: |
                latest
                $(pomversion)
          - task: PublishPipelineArtifact@1
            displayName: 'Publish Atrifact manifests'
            inputs:
              targetPath: '$(Build.Repository.LocalPath)/.devops/manifests'
              artifact: 'manifests'
              publishLocation: 'pipeline'

      - deployment: Deploy
        displayName: Deploy
        dependsOn: Build
        pool:
          name: $(poolNameDeploy)
        environment: $(environment)
        strategy:
          runOnce:
            deploy:
              steps:
                - download: none
                - task: DownloadPipelineArtifact@2
                  inputs:
                    buildType: 'current'
                    artifactName: 'manifests'
                    targetPath: '$(Pipeline.Workspace)/manifests'
                - task: KubernetesManifest@0
                  displayName: Create Namespace
                  inputs:
                    namespace: $(namespace)
                    action: deploy
                    kubernetesServiceConnection: $(kubernetesServiceConnection)
                    manifests: |
                      $(Pipeline.Workspace)/manifests/namespace-$(environment).yml
                - task: KubernetesManifest@0
                  displayName: Deploy to Kubernetes cluster
                  inputs:
                    namespace: $(namespace)
                    action: deploy
                    kubernetesServiceConnection: $(kubernetesServiceConnection)
                    manifests: |
                      $(Pipeline.Workspace)/manifests/deployment-$(environment).yml
                      $(Pipeline.Workspace)/manifests/service-$(environment).yml
                      $(Pipeline.Workspace)/manifests/ingress-$(environment).yml
                    imagePullSecrets: |
                      $(imagePullSecret)
                    containers: |
                      $(containerRegistry)/$(imageRepository):$(pomversion)